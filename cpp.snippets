snippet cpshort 
/**************************
* syxm1
* created: `!v strftime("%Y-%m-%d %H:%M")` 
**************************/

#include<bits/stdc++.h>
using namespace std;

#ifndef ONLINE_JUDGE
#include "local/debug.h"
#else 
#define trace(...) 37
#endif

using ll = long long;

void test_case() {
	$0
}

signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	
	int tc = 1;
	// cin >> tc;

	while (tc--) {
		test_case();
	}
}
endsnippet

snippet modexp 
ll modexp(ll a, ll x, ll mod) {
	ll ret = 1;
	while (x) {
		if (x & 1) ret = (ret * a) % mod;
		a = (a * a) % mod;
		x >>= 1;
	}
	return ret;
}
endsnippet

snippet dsu 
struct DSU {
	vector<int> par, sz;

	DSU(int n) {
		sz.assign(n, 1);
		par.resize(n);
		iota(par.begin(), par.end(), 0);
	}

	int get(int x) {
		return (par[x] == x ? x : get(par[x]));
	}

	void merge(int u, int v) {
		u = get(u);
		v = get(v);
		if (u != v) {
			if (sz[u] > sz[v]) swap(u, v);
			par[u] = v;
			sz[v] += sz[u];
		}
	} 
};
endsnippet

snippet dfs 
void dfs(int cur, int pre) {
	for (int nxt : adj[cur]) {
		if (pre != nxt) {
			dfs(nxt, cur);
		}
	}
}
endsnippet

snippet sparse
vector<int> lg(mxN);
void get_log() {
	lg[1] = 0;
	for (int i = 2; i < mxN; i++) {
		lg[i] = lg[i/2] + 1;
	}
}

template<typename T> struct sparse {
	const size_t B = 20; // bit
	size_t n;
	vector<vector<T>> table;

	sparse(size_t sz) {
		this->n = sz;
	}

	sparse(vector<T> v) {
		this->n = v.size();
		table.assign(B, vector<T>(n));
		for (size_t i = 0; i < v.size(); i++) {
			table[0][i] = v[i];
		}
		compute();
	}

	void compute() {
		for (size_t i = 1; i < B; i++) {
			for (size_t j = 0; j + (1 << i) <= n; j++) {
				table[i][j] = min(table[i-1][j], table[i-1][j+(1<<(i-1))]);
			}
		}
	}

	T que(size_t l, size_t r) {
		int i = lg[r - l + 1];
		return min(table[i][l], table[i][r-(1<<i)+1]);
	}
};
endsnippet

# vim:ft=snippets:
